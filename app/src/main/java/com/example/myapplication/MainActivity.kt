package com.example.myapplication

import android.app.DatePickerDialog
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.MenuItem
import android.view.View
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.Spinner
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.PopupMenu
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.android.material.textfield.TextInputEditText
import com.google.firebase.Timestamp
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {

    private lateinit var formLayout: View
    private lateinit var etAmount: TextInputEditText
    private lateinit var etDescription: TextInputEditText
    private lateinit var spinnerCategory: Spinner
    private lateinit var btnDate: Button
    private lateinit var btnCancel: Button
    private lateinit var btnSave: Button
    private lateinit var fabAdd: FloatingActionButton
    private lateinit var tvTotalAmount: TextView
    private lateinit var rvExpenses: androidx.recyclerview.widget.RecyclerView
    private lateinit var tvSeeAll: TextView

    private val db = FirebaseFirestore.getInstance()
    private val expensesCollection = db.collection("expenses")

    // Auth ƒë·ªông
    private val auth: FirebaseAuth get() = FirebaseAuth.getInstance()
    private val currentUser get() = auth.currentUser
    private val userId get() = currentUser?.uid

    private val categories = arrayOf(
        "Thu√™ nh√†", "H√≥a ƒë∆°n ƒëi·ªán", "H√≥a ƒë∆°n n∆∞·ªõc", "H√≥a ƒë∆°n internet",
        "ƒÇn u·ªëng", "Mua s·∫Øm", "Di chuy·ªÉn", "Gi·∫£i tr√≠", "Y t·∫ø", "Gi√°o d·ª•c", "Kh√°c"
    )

    private var isFormVisible = false
    private var totalAmount = 0.0
    private lateinit var expenseAdapter: ExpenseAdapter
    private val expenseList = mutableListOf<Expense>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // D√πng ƒë√∫ng layout b·∫°n ƒë√£ khai b√°o
        setContentView(R.layout.activity_main)

        initializeViews()
        setupRecyclerView()
        setupCategorySpinner()
        setupDatePicker()
        setupFabButton()
        setupButtons()
        setupSeeAll()

        // Set m·∫∑c ƒë·ªãnh h√¥m nay cho n√∫t ng√†y
        btnDate.text = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault()).format(Date())

        // üîπ Trang ch·ªß: load T·∫§T C·∫¢ chi ti√™u (m·ªçi th√°ng)
        loadAllExpenses()
        setupBottomNavigation()
    }

    override fun onResume() {
        super.onResume()
        hideForm()
        loadAllExpenses()
    }

    private fun initializeViews() {
        formLayout = findViewById(R.id.formLayout)
        etAmount = findViewById(R.id.etAmount)
        etDescription = findViewById(R.id.etDescription)
        spinnerCategory = findViewById(R.id.spinnerCategory)
        btnDate = findViewById(R.id.btnDate)
        btnCancel = findViewById(R.id.btnCancel)
        btnSave = findViewById(R.id.btnSave)
        fabAdd = findViewById(R.id.fabAdd)
        tvTotalAmount = findViewById(R.id.tvTotalAmount)
        rvExpenses = findViewById(R.id.rvExpenses)
        tvSeeAll = findViewById(R.id.tvSeeAll)
    }

    private fun setupRecyclerView() {
        expenseAdapter = ExpenseAdapter(expenseList)
        rvExpenses.layoutManager = LinearLayoutManager(this)
        rvExpenses.adapter = expenseAdapter
        rvExpenses.addItemDecoration(DividerItemDecoration(this, LinearLayoutManager.VERTICAL))
        // RecyclerView cao 180dp theo layout -> hi·ªÉn th·ªã ~2 item v√† c√≥ th·ªÉ scroll
    }

    private fun setupCategorySpinner() {
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, categories)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinnerCategory.adapter = adapter
    }

    private fun setupDatePicker() {
        val calendar = Calendar.getInstance()
        btnDate.setOnClickListener {
            val dialog = DatePickerDialog(
                this,
                { _, year, month, dayOfMonth ->
                    calendar.set(year, month, dayOfMonth)
                    btnDate.text = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
                        .format(calendar.time)
                },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
            )
            dialog.show()
        }
    }

    // Y√™u c·∫ßu login tr∆∞·ªõc khi l√†m action
    private fun requireLoginThen(action: () -> Unit) {
        if (currentUser == null) {
            Toast.makeText(this, "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y", Toast.LENGTH_SHORT).show()
            startActivity(Intent(this, LoginActivity::class.java))
        } else action()
    }

    private fun setupFabButton() {
        fabAdd.setOnClickListener {
            requireLoginThen { if (isFormVisible) hideForm() else showForm() }
        }
    }

    private fun setupButtons() {
        btnCancel.setOnClickListener { hideForm(); clearForm() }
        btnSave.setOnClickListener { requireLoginThen { saveExpense() } }
    }

    private fun setupSeeAll() {
        tvSeeAll.setOnClickListener {
            requireLoginThen { startActivity(Intent(this, StatisticActivity::class.java)) }
        }
    }

    private fun showForm() {
        formLayout.visibility = View.VISIBLE
        isFormVisible = true
        updateFabIcon()
    }

    private fun hideForm() {
        formLayout.visibility = View.GONE
        isFormVisible = false
        updateFabIcon()
    }

    private fun updateFabIcon() {
        if (isFormVisible) {
            fabAdd.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_close))
            fabAdd.contentDescription = "ƒê√≥ng form th√™m chi ti√™u"
        } else {
            fabAdd.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_add))
            fabAdd.contentDescription = "M·ªü form th√™m chi ti√™u"
        }
    }

    private fun clearForm() {
        etAmount.text?.clear()
        etDescription.text?.clear()
        spinnerCategory.setSelection(0)
        btnDate.text = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault()).format(Date())
    }

    // Parse ng√†y an to√†n (ch·∫•p nh·∫≠n v√†i format th∆∞·ªùng g·∫∑p)
    private fun safeParseDateOrNull(dateStr: String): Date? {
        val patterns = listOf("dd/MM/yyyy", "d/M/yyyy", "dd-M-yyyy", "yyyy-MM-dd")
        for (p in patterns) {
            try {
                val fmt = SimpleDateFormat(p, Locale.getDefault()).apply { isLenient = false }
                return fmt.parse(dateStr)
            } catch (_: Exception) { }
        }
        Log.w("ExpenseDate", "Kh√¥ng parse ƒë∆∞·ª£c ng√†y: $dateStr")
        return null
    }

    private fun monthYearFrom(date: Date): String =
        SimpleDateFormat("MM/yyyy", Locale.getDefault()).format(date)

    private fun saveExpense() {
        val amountText = etAmount.text.toString().trim()
        val description = etDescription.text.toString().trim()
        val category = spinnerCategory.selectedItem.toString()
        val dateText = btnDate.text.toString().trim()

        if (amountText.isEmpty()) { etAmount.error = "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn"; return }
        val amount = try { amountText.toDouble() } catch (_: NumberFormatException) {
            etAmount.error = "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá"; return
        }
        if (dateText.isEmpty() || dateText.equals("Ch·ªçn ng√†y", ignoreCase = true)) {
            Toast.makeText(this, "Vui l√≤ng ch·ªçn ng√†y", Toast.LENGTH_SHORT).show(); return
        }
        val uid = userId ?: run { startActivity(Intent(this, LoginActivity::class.java)); return }

        val pickedDate = safeParseDateOrNull(dateText) ?: Date()
        val monthYear = monthYearFrom(pickedDate)
        val pickedTime = pickedDate.time

        val expense = hashMapOf(
            "userId" to uid,
            "amount" to amount,
            "description" to description,
            "category" to category,
            "date" to SimpleDateFormat("dd/MM/yyyy", Locale.getDefault()).format(pickedDate),
            "monthYear" to monthYear,      // ƒë·ªÉ trang Th·ªëng k√™ l·ªçc theo th√°ng
            "timestamp" to pickedTime,     // d√πng s·∫Øp x·∫øp
            "createdAt" to Timestamp.now()
        )

        expensesCollection.add(expense)
            .addOnSuccessListener { doc ->
                val newExpense = Expense(
                    id = doc.id,
                    amount = amount,
                    description = description,
                    category = category,
                    date = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault()).format(pickedDate),
                    timestamp = pickedTime
                )

                // Trang ch·ªß hi·ªÉn th·ªã T·∫§T C·∫¢, n√™n th√™m tr·ª±c ti·∫øp v√†o ƒë·∫ßu danh s√°ch
                expenseList.add(0, newExpense)
                expenseAdapter.updateExpenses(expenseList)

                totalAmount += amount
                updateTotalAmount()

                hideForm(); clearForm()
                Toast.makeText(this, "ƒê√£ l∆∞u: ${formatCurrency(amount)} VNƒê", Toast.LENGTH_SHORT).show()
            }
            .addOnFailureListener { e ->
                Toast.makeText(this, "L·ªói khi l∆∞u: ${e.message}", Toast.LENGTH_SHORT).show()
            }
    }

    /** üîπ Trang ch·ªß: t·∫£i T·∫§T C·∫¢ chi ti√™u c·ªßa user (m·ªçi th√°ng) */
    private fun loadAllExpenses() {
        val uid = userId ?: run {
            totalAmount = 0.0
            expenseList.clear()
            updateTotalAmount()
            expenseAdapter.updateExpenses(expenseList)
            return
        }

        // Kh√¥ng d√πng orderBy ƒë·ªÉ tr√°nh y√™u c·∫ßu composite index; sort ·ªü client
        expensesCollection
            .whereEqualTo("userId", uid)
            .get()
            .addOnSuccessListener { docs ->
                totalAmount = 0.0
                val tmp = mutableListOf<Expense>()
                for (document in docs) {
                    val data = document.data
                    val expense = Expense(
                        id = document.id,
                        amount = (data["amount"] as? Number)?.toDouble() ?: 0.0,
                        description = data["description"] as? String ?: "",
                        category = data["category"] as? String ?: "",
                        date = data["date"] as? String ?: "",
                        timestamp = (data["timestamp"] as? Number)?.toLong() ?: 0L
                    )
                    tmp.add(expense)
                    totalAmount += expense.amount
                }

                // S·∫Øp x·∫øp m·ªõi nh·∫•t l√™n tr√™n
                tmp.sortByDescending { it.timestamp }

                expenseList.clear()
                expenseList.addAll(tmp)

                updateTotalAmount()
                expenseAdapter.updateExpenses(expenseList)
            }
            .addOnFailureListener { e ->
                Toast.makeText(this, "Firestore l·ªói: ${e.message}", Toast.LENGTH_SHORT).show()
            }
    }

    private fun updateTotalAmount() {
        tvTotalAmount.text = "${formatCurrency(totalAmount)} VNƒê"
    }

    private fun formatCurrency(amount: Double): String =
        "%,.0f".format(amount).replace(",", ".")

    // (n·∫øu c√≥ menu_account)
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.menu_account -> {
                val anchorView = findViewById<View>(R.id.menu_account) ?: fabAdd
                showAccountPopupMenu(anchorView); true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun setupBottomNavigation() {
        val bottomNavigation =
            findViewById<com.google.android.material.bottomnavigation.BottomNavigationView>(R.id.bottomNavigation)

        bottomNavigation.setOnItemSelectedListener { item ->
            when (item.itemId) {
                R.id.nav_home -> { hideForm(); loadAllExpenses(); true }
                R.id.nav_statistics -> {
                    requireLoginThen {
                        startActivity(Intent(this, StatisticActivity::class.java))
                    }
                    true
                }
                R.id.nav_account -> { startActivity(Intent(this, ProfileActivity::class.java)); true }
                else -> false
            }
        }
    }

    private fun showAccountPopupMenu(anchorView: View) {
        val popup = PopupMenu(this, anchorView)
        popup.menuInflater.inflate(R.menu.account_popup_menu, popup.menu)
        val isLoggedIn = currentUser != null
        popup.menu.findItem(R.id.menu_login).isVisible = !isLoggedIn
        popup.menu.findItem(R.id.menu_logout).isVisible = isLoggedIn
        popup.menu.findItem(R.id.menu_profile).isVisible = isLoggedIn

        popup.setOnMenuItemClickListener { clickedItem ->
            when (clickedItem.itemId) {
                R.id.menu_login -> { startActivity(Intent(this, LoginActivity::class.java)); true }
                R.id.menu_logout -> { FirebaseAuth.getInstance().signOut(); recreate(); true }
                R.id.menu_profile -> { Toast.makeText(this, "Xem h·ªì s∆°", Toast.LENGTH_SHORT).show(); true }
                else -> false
            }
        }
        popup.show()
    }
}
